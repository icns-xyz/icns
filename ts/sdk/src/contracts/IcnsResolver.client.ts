/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Name, Binary, Uint128, Adr36Info, QueryMsg, MigrateMsg, AddressResponse, AddressByIcnsResponse, AddressesResponse, AdminResponse, Addr, Config, IcnsNamesResponse, NamesResponse, PrimaryNameResponse } from "./IcnsResolver.types";
export interface IcnsResolverReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  addresses: ({
    name
  }: {
    name: string;
  }) => Promise<AddressesResponse>;
  address: ({
    bech32Prefix,
    name
  }: {
    bech32Prefix: string;
    name: string;
  }) => Promise<AddressResponse>;
  names: ({
    address
  }: {
    address: string;
  }) => Promise<NamesResponse>;
  icnsNames: ({
    address
  }: {
    address: string;
  }) => Promise<IcnsNamesResponse>;
  primaryName: ({
    address
  }: {
    address: string;
  }) => Promise<PrimaryNameResponse>;
  admin: () => Promise<AdminResponse>;
  addressByIcns: ({
    icns
  }: {
    icns: string;
  }) => Promise<AddressByIcnsResponse>;
}
export class IcnsResolverQueryClient implements IcnsResolverReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.addresses = this.addresses.bind(this);
    this.address = this.address.bind(this);
    this.names = this.names.bind(this);
    this.icnsNames = this.icnsNames.bind(this);
    this.primaryName = this.primaryName.bind(this);
    this.admin = this.admin.bind(this);
    this.addressByIcns = this.addressByIcns.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  addresses = async ({
    name
  }: {
    name: string;
  }): Promise<AddressesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      addresses: {
        name
      }
    });
  };
  address = async ({
    bech32Prefix,
    name
  }: {
    bech32Prefix: string;
    name: string;
  }): Promise<AddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      address: {
        bech32_prefix: bech32Prefix,
        name
      }
    });
  };
  names = async ({
    address
  }: {
    address: string;
  }): Promise<NamesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      names: {
        address
      }
    });
  };
  icnsNames = async ({
    address
  }: {
    address: string;
  }): Promise<IcnsNamesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      icns_names: {
        address
      }
    });
  };
  primaryName = async ({
    address
  }: {
    address: string;
  }): Promise<PrimaryNameResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      primary_name: {
        address
      }
    });
  };
  admin = async (): Promise<AdminResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  addressByIcns = async ({
    icns
  }: {
    icns: string;
  }): Promise<AddressByIcnsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      address_by_icns: {
        icns
      }
    });
  };
}
export interface IcnsResolverInterface extends IcnsResolverReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setRecord: ({
    adr36Info,
    bech32Prefix,
    name
  }: {
    adr36Info: Adr36Info;
    bech32Prefix: string;
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setPrimary: ({
    bech32Address,
    name
  }: {
    bech32Address: string;
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeRecord: ({
    bech32Address,
    name
  }: {
    bech32Address: string;
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IcnsResolverClient extends IcnsResolverQueryClient implements IcnsResolverInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setRecord = this.setRecord.bind(this);
    this.setPrimary = this.setPrimary.bind(this);
    this.removeRecord = this.removeRecord.bind(this);
  }

  setRecord = async ({
    adr36Info,
    bech32Prefix,
    name
  }: {
    adr36Info: Adr36Info;
    bech32Prefix: string;
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_record: {
        adr36_info: adr36Info,
        bech32_prefix: bech32Prefix,
        name
      }
    }, fee, memo, funds);
  };
  setPrimary = async ({
    bech32Address,
    name
  }: {
    bech32Address: string;
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_primary: {
        bech32_address: bech32Address,
        name
      }
    }, fee, memo, funds);
  };
  removeRecord = async ({
    bech32Address,
    name
  }: {
    bech32Address: string;
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_record: {
        bech32_address: bech32Address,
        name
      }
    }, fee, memo, funds);
  };
}