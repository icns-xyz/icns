/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, Decimal, Binary, InstantiateMsg, Coin, ExecuteMsg, Verification, QueryMsg, MigrateMsg, FeeResponse, NameByTwitterIdResponse, NameNftAddressResponse, ReferralCountResponse, VerificationThresholdResponse, VerifierPubKeysResponse } from "./IcnsRegistrar.types";
export interface IcnsRegistrarReadOnlyInterface {
  contractAddress: string;
  verifierPubKeys: () => Promise<VerifierPubKeysResponse>;
  verificationThreshold: () => Promise<VerificationThresholdResponse>;
  nameNftAddress: () => Promise<NameNftAddressResponse>;
  referralCount: ({
    name
  }: {
    name: string;
  }) => Promise<ReferralCountResponse>;
  fee: () => Promise<FeeResponse>;
  nameByTwitterId: ({
    twitterId
  }: {
    twitterId: string;
  }) => Promise<NameByTwitterIdResponse>;
}
export class IcnsRegistrarQueryClient implements IcnsRegistrarReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.verifierPubKeys = this.verifierPubKeys.bind(this);
    this.verificationThreshold = this.verificationThreshold.bind(this);
    this.nameNftAddress = this.nameNftAddress.bind(this);
    this.referralCount = this.referralCount.bind(this);
    this.fee = this.fee.bind(this);
    this.nameByTwitterId = this.nameByTwitterId.bind(this);
  }

  verifierPubKeys = async (): Promise<VerifierPubKeysResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verifier_pub_keys: {}
    });
  };
  verificationThreshold = async (): Promise<VerificationThresholdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verification_threshold: {}
    });
  };
  nameNftAddress = async (): Promise<NameNftAddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      name_nft_address: {}
    });
  };
  referralCount = async ({
    name
  }: {
    name: string;
  }): Promise<ReferralCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      referral_count: {
        name
      }
    });
  };
  fee = async (): Promise<FeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      fee: {}
    });
  };
  nameByTwitterId = async ({
    twitterId
  }: {
    twitterId: string;
  }): Promise<NameByTwitterIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      name_by_twitter_id: {
        twitter_id: twitterId
      }
    });
  };
}
export interface IcnsRegistrarInterface extends IcnsRegistrarReadOnlyInterface {
  contractAddress: string;
  sender: string;
  claim: ({
    name,
    referral,
    verifications,
    verifyingMsg
  }: {
    name: string;
    referral?: string;
    verifications: Verification[];
    verifyingMsg: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateVerifierPubkeys: ({
    add,
    remove
  }: {
    add: Binary[];
    remove: Binary[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setVerificationThreshold: ({
    threshold
  }: {
    threshold: Decimal;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setNameNftAddress: ({
    nameNftAddress
  }: {
    nameNftAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setMintingFee: ({
    mintingFee
  }: {
    mintingFee?: Coin;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawFunds: ({
    amount,
    toAddress
  }: {
    amount: Coin[];
    toAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IcnsRegistrarClient extends IcnsRegistrarQueryClient implements IcnsRegistrarInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claim = this.claim.bind(this);
    this.updateVerifierPubkeys = this.updateVerifierPubkeys.bind(this);
    this.setVerificationThreshold = this.setVerificationThreshold.bind(this);
    this.setNameNftAddress = this.setNameNftAddress.bind(this);
    this.setMintingFee = this.setMintingFee.bind(this);
    this.withdrawFunds = this.withdrawFunds.bind(this);
  }

  claim = async ({
    name,
    referral,
    verifications,
    verifyingMsg
  }: {
    name: string;
    referral?: string;
    verifications: Verification[];
    verifyingMsg: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        name,
        referral,
        verifications,
        verifying_msg: verifyingMsg
      }
    }, fee, memo, funds);
  };
  updateVerifierPubkeys = async ({
    add,
    remove
  }: {
    add: Binary[];
    remove: Binary[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_verifier_pubkeys: {
        add,
        remove
      }
    }, fee, memo, funds);
  };
  setVerificationThreshold = async ({
    threshold
  }: {
    threshold: Decimal;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_verification_threshold: {
        threshold
      }
    }, fee, memo, funds);
  };
  setNameNftAddress = async ({
    nameNftAddress
  }: {
    nameNftAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_name_nft_address: {
        name_nft_address: nameNftAddress
      }
    }, fee, memo, funds);
  };
  setMintingFee = async ({
    mintingFee
  }: {
    mintingFee?: Coin;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_minting_fee: {
        minting_fee: mintingFee
      }
    }, fee, memo, funds);
  };
  withdrawFunds = async ({
    amount,
    toAddress
  }: {
    amount: Coin[];
    toAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_funds: {
        amount,
        to_address: toAddress
      }
    }, fee, memo, funds);
  };
}