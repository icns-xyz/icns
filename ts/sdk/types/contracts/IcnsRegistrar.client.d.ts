/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { StdFee } from "@cosmjs/amino";
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Binary, Coin, Decimal, FeeResponse, NameByTwitterIdResponse, NameNFTAddressResponse, ReferralCountResponse, Verification, VerificationThresholdResponse, VerifierPubKeysResponse } from "./IcnsRegistrar.types";
export interface IcnsRegistrarReadOnlyInterface {
    contractAddress: string;
    verifierPubKeys: () => Promise<VerifierPubKeysResponse>;
    verificationThreshold: () => Promise<VerificationThresholdResponse>;
    nameNFTAddress: () => Promise<NameNFTAddressResponse>;
    referralCount: ({ name }: {
        name: string;
    }) => Promise<ReferralCountResponse>;
    fee: () => Promise<FeeResponse>;
    nameByTwitterId: ({ twitterId, }: {
        twitterId: string;
    }) => Promise<NameByTwitterIdResponse>;
}
export declare class IcnsRegistrarQueryClient implements IcnsRegistrarReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    verifierPubKeys: () => Promise<VerifierPubKeysResponse>;
    verificationThreshold: () => Promise<VerificationThresholdResponse>;
    nameNFTAddress: () => Promise<NameNFTAddressResponse>;
    referralCount: ({ name, }: {
        name: string;
    }) => Promise<ReferralCountResponse>;
    fee: () => Promise<FeeResponse>;
    nameByTwitterId: ({ twitterId, }: {
        twitterId: string;
    }) => Promise<NameByTwitterIdResponse>;
}
export interface IcnsRegistrarInterface extends IcnsRegistrarReadOnlyInterface {
    contractAddress: string;
    sender: string;
    claim: ({ name, referral, verifications, verifyingMsg, }: {
        name: string;
        referral?: string;
        verifications: Verification[];
        verifyingMsg: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateVerifierPubkeys: ({ add, remove, }: {
        add: Binary[];
        remove: Binary[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setVerificationThreshold: ({ threshold, }: {
        threshold: Decimal;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setNameNFTAddress: ({ nameNftAddress, }: {
        nameNftAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setFee: (set_fee: {
        fee?: Coin;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawFunds: ({ amount, toAddress, }: {
        amount: Coin[];
        toAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class IcnsRegistrarClient extends IcnsRegistrarQueryClient implements IcnsRegistrarInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    claim: ({ name, referral, verifications, verifyingMsg, }: {
        name: string;
        referral?: string;
        verifications: Verification[];
        verifyingMsg: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateVerifierPubkeys: ({ add, remove, }: {
        add: Binary[];
        remove: Binary[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setVerificationThreshold: ({ threshold, }: {
        threshold: Decimal;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setNameNFTAddress: ({ nameNftAddress, }: {
        nameNftAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setFee: (set_fee: {
        fee?: Coin;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawFunds: ({ amount, toAddress, }: {
        amount: Coin[];
        toAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=IcnsRegistrar.client.d.ts.map