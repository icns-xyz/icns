/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { Coin, StdFee } from "@cosmjs/amino";
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { AdminResponse, AllNftInfoResponseForNullable_Empty, ApprovalResponse, ApprovalsResponse, Binary, ContractInfoResponse, Empty, Expiration, ICNSNameExecuteMsg, IsAdminResponse, MinterResponse, NftInfoResponseForNullable_Empty, NumTokensResponse, OperatorsResponse, OwnerOfResponse, TokensResponse, TransferrableResponse } from "./IcnsNameNft.types";
export interface IcnsNameNftReadOnlyInterface {
    contractAddress: string;
    admin: () => Promise<AdminResponse>;
    isAdmin: ({ address }: {
        address: string;
    }) => Promise<IsAdminResponse>;
    transferrable: () => Promise<TransferrableResponse>;
    ownerOf: ({ includeExpired, tokenId, }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<OwnerOfResponse>;
    approval: ({ includeExpired, spender, tokenId, }: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    }) => Promise<ApprovalResponse>;
    approvals: ({ includeExpired, tokenId, }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<ApprovalsResponse>;
    allOperators: ({ includeExpired, limit, owner, startAfter, }: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<OperatorsResponse>;
    numTokens: () => Promise<NumTokensResponse>;
    contractInfo: () => Promise<ContractInfoResponse>;
    nftInfo: ({ tokenId, }: {
        tokenId: string;
    }) => Promise<NftInfoResponseForNullable_Empty>;
    allNftInfo: ({ includeExpired, tokenId, }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<AllNftInfoResponseForNullable_Empty>;
    tokens: ({ limit, owner, startAfter, }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    allTokens: ({ limit, startAfter, }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    minter: () => Promise<MinterResponse>;
}
export declare class IcnsNameNftQueryClient implements IcnsNameNftReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    admin: () => Promise<AdminResponse>;
    isAdmin: ({ address, }: {
        address: string;
    }) => Promise<IsAdminResponse>;
    transferrable: () => Promise<TransferrableResponse>;
    ownerOf: ({ includeExpired, tokenId, }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<OwnerOfResponse>;
    approval: ({ includeExpired, spender, tokenId, }: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    }) => Promise<ApprovalResponse>;
    approvals: ({ includeExpired, tokenId, }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<ApprovalsResponse>;
    allOperators: ({ includeExpired, limit, owner, startAfter, }: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<OperatorsResponse>;
    numTokens: () => Promise<NumTokensResponse>;
    contractInfo: () => Promise<ContractInfoResponse>;
    nftInfo: ({ tokenId, }: {
        tokenId: string;
    }) => Promise<NftInfoResponseForNullable_Empty>;
    allNftInfo: ({ includeExpired, tokenId, }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<AllNftInfoResponseForNullable_Empty>;
    tokens: ({ limit, owner, startAfter, }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    allTokens: ({ limit, startAfter, }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    minter: () => Promise<MinterResponse>;
}
export interface IcnsNameNftInterface extends IcnsNameNftReadOnlyInterface {
    contractAddress: string;
    sender: string;
    transferNft: ({ recipient, tokenId, }: {
        recipient: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    sendNft: ({ contract, msg, tokenId, }: {
        contract: string;
        msg: Binary;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    approve: ({ expires, spender, tokenId, }: {
        expires?: Expiration;
        spender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revoke: ({ spender, tokenId, }: {
        spender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    approveAll: ({ expires, operator, }: {
        expires?: Expiration;
        operator: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revokeAll: ({ operator, }: {
        operator: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ extension, owner, tokenId, tokenUri, }: {
        extension?: Empty;
        owner: string;
        tokenId: string;
        tokenUri?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ tokenId, }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    extension: ({ msg, }: {
        msg: ICNSNameExecuteMsg;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class IcnsNameNftClient extends IcnsNameNftQueryClient implements IcnsNameNftInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    transferNft: ({ recipient, tokenId, }: {
        recipient: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    sendNft: ({ contract, msg, tokenId, }: {
        contract: string;
        msg: Binary;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    approve: ({ expires, spender, tokenId, }: {
        expires?: Expiration;
        spender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revoke: ({ spender, tokenId, }: {
        spender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    approveAll: ({ expires, operator, }: {
        expires?: Expiration;
        operator: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revokeAll: ({ operator, }: {
        operator: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ extension, owner, tokenId, tokenUri, }: {
        extension?: Empty;
        owner: string;
        tokenId: string;
        tokenUri?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ tokenId, }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    extension: ({ msg, }: {
        msg: ICNSNameExecuteMsg;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=IcnsNameNft.client.d.ts.map